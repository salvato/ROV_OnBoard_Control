void myMessageOutput(QtMsgType type, const QMessageLogContext &context, const QString &msg)
  {
      QByteArray localMsg = msg.toLocal8Bit();
      switch (type) {
      case QtDebugMsg:
          fprintf(stderr, "Debug: %s (%s:%u, %s)\n", localMsg.constData(), context.file, context.line, context.function);
          break;
      case QtInfoMsg:
          fprintf(stderr, "Info: %s (%s:%u, %s)\n", localMsg.constData(), context.file, context.line, context.function);
          break;
      case QtWarningMsg:
          fprintf(stderr, "Warning: %s (%s:%u, %s)\n", localMsg.constData(), context.file, context.line, context.function);
          break;
      case QtCriticalMsg:
          fprintf(stderr, "Critical: %s (%s:%u, %s)\n", localMsg.constData(), context.file, context.line, context.function);
          break;
      case QtFatalMsg:
          fprintf(stderr, "Fatal: %s (%s:%u, %s)\n", localMsg.constData(), context.file, context.line, context.function);
          abort();
      }
  }

  int main(int argc, char **argv)
  {
      qInstallMessageHandler(myMessageOutput);
      QApplication app(argc, argv);
      ...
      return app.exec();
  }




// how to show the Raspberry PI's Temperature.
/opt/vc/bin/vcgencmd measure_temp



// rename example
#include <stdio.h>

int main ()
{
  int result;
  char oldname[] ="oldname.txt";
  char newname[] ="newname.txt";
  result= rename( oldname , newname );
  if ( result == 0 )
    puts ( "File successfully renamed" );
  else
    perror( "Error renaming file" );
  return 0;
}


//  QString sUsbDevicesFile = "./usbDevices.txt";
//  system((QString("lsusb > ") + sUsbDevicesFile).toLatin1());
//  QFile usbDevicesFile(sUsbDevicesFile);
//  if(usbDevicesFile.exists()) {
//    if(usbDevicesFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
//      QTextStream usbDevices(&usbDevicesFile);
//      QString sLine;
//      while(!usbDevices.atEnd()) {
//        sLine = usbDevices.readLine();
//        if(sLine.contains("Bluetooth")) {
//          QString sBus, sDev;
//          QStringList sValues = sLine.split(QString(" "));
//          for(int i=0; i<sValues.count()-2; i++) {
//            if(sValues.at(i) == "Bus") {
//              sBus = sValues.at(i+1);
//              i++;
//            }
//            if(sValues.at(i) == "Device") {
//              sDev = sValues.at(i+1);
//              i++;
//            }
//          }
//          sUsbDeviceFile = QString("/dev/bus/usb/%1/%2").arg(sBus).arg(sDev.left(3));
//        }
//      }
//      if(!sUsbDevicesFile.isEmpty())
//        usbReset(sUsbDeviceFile);
//    }
//  }


//  qDebug() << "Host Name: "
//           << QHostInfo::localHostName();
//  foreach (const QHostAddress &address, QNetworkInterface::allAddresses()) {
//    if (address.protocol() == QAbstractSocket::IPv4Protocol && address != QHostAddress(QHostAddress::LocalHost)) {
//      qDebug() << address.toString();
//    }
//  }


//  if(!bUseBluetooth) {
//    sCommand = QString("rfcomm unbind 0");
//    int iResult = system(sCommand.toLatin1());
//    sCommand = QString("rfcomm bind 0 ") + shimmerBtAdress.toString();
//    iResult = system(sCommand.toLatin1());
//  }


int
ROV_App::usbReset(QString sDevice) {
    int fd = open(sDevice.toLatin1(), O_WRONLY);
    if(fd < 0) {
        sDebugMessage = QString();
        sInformation << dateTime.currentDateTime().toString()
                     << " Error opening USB device file";
        qDebug() << sDebugMessage;
        return -1;
    }
    int rc = ioctl(fd, USBDEVFS_RESET, 0);
    if(rc < 0) {
      QString sError;
      if(errno == EBADF)  sError = " fd is not a valid file descriptor.";
      if(errno == EFAULT) sError = " argp references an inaccessible memory area.";
      if(errno == EINVAL) sError = " request or argp is not valid.";
      if(errno == ENOTTY) sError = " fd is not associated with a character special device.";
      if(errno == ENOTTY) sError+= " The specified request does not apply to the kind of object that the file descriptor fd references.";
      sDebugMessage = QString();
      sInformation << dateTime.currentDateTime().toString()
                   << " ioctl error in resetting USB device file "
                   << sDevice
                   << sError;
      qDebug() << sDebugMessage;
      return -1;
    }
    close(fd);
    sDebugMessage = QString();
    sInformation << dateTime.currentDateTime().toString()
                 << " Reset of USB device file "
                 << sDevice
                 << " done !";
    qDebug() << sDebugMessage;
    return 0;
}
